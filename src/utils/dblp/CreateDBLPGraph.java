package utils.dblp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

/**
 * Creates the DBLP graph author1 \t author 2 \t time Required dblp.txt
 * generated by https://github.com/ksemer/DBLPGraphGenerator
 * 
 * @author ksemer
 */
public class CreateDBLPGraph {
	public static final int currentYear = 2016;
	private final String PATH_DBLP_INPUT = "C:\\Users\\ksemer\\workspace\\tkde_data\\dblp.txt";
	private final String PATH_DBLP_AUTHORS_MAP = "dblp_authors_ids";
	private final String PATH_DBLP_GRAPH = "dblp_graph";
	private final String PATH_DBLP_AUTHORS_CONFERENCES = "dblp_authors_conf";
	private final String PATH_DBLP_GRAPH_ATTRIBUTES = "dblp_publications_labels";
	private final String PATH_DBLP_GRAPH_CONF_ATTRIBUTES = "dblp_conferences_labels";
	private final String PATH_DBLP_CONFERENCES_MAP = "dblp_conferences_ids";

	// Create graph from specific conferences
	private final Set<String> CONFERENCES = new HashSet<String>(Arrays.asList("ICDE", "VLDB", "EDBT",
			"SIGMOD Conference", "KDD", "KDD Cup", "WWW", "SIGIR", "CIKM", "SDM", "ICDM", "WWW (Companion Volume)"));

	// is used to replace authors names with a unique id.
	private HashMap<String, Author> allAuthors = new HashMap<>();
	private Map<String, Integer> conferences = new HashMap<>();

	private FileWriter w_graph = new FileWriter(PATH_DBLP_GRAPH, false);
	private FileWriter w_authors = new FileWriter(PATH_DBLP_AUTHORS_MAP, false);
	private FileWriter w_authors_conf = new FileWriter(PATH_DBLP_AUTHORS_CONFERENCES, false);

	public CreateDBLPGraph() throws IOException {
		BufferedReader input = new BufferedReader(new FileReader(PATH_DBLP_INPUT));
		int year = 0, id = 0, conf_id = 0;
		String line = null, booktitle = null, title = null;
		List<String> authors = new ArrayList<String>();

		while ((line = input.readLine()) != null) {
			if (line.contains("Author: ")) {

				if (booktitle != null) {
					// store and map conference -> id
					if (conferences.get(booktitle) == null) {
						conferences.put(booktitle, conf_id);
						conf_id++;
					}

					writeF(booktitle, title, year, authors);
					authors.clear();
					title = null;
					booktitle = null;
				}

				String author = line.replace("Author: ", "");
				authors.add(author);

				// map author to a unique id
				if (!allAuthors.containsKey(author)) {
					allAuthors.put(author, new Author(id));
					id++;
				}
			} else if (line.contains("Title: ")) {
				title = line.replace("Title: ", "");
				title.replaceAll("[^A-Za-z0-9]", "");
			} else if (line.contains("Year: ") && !line.contains("Title:")) {
				year = Integer.parseInt(line.replace("Year: ", ""));
			} else if (line.contains("Booktitle: ")) {
				booktitle = line.replace("Booktitle: ", "");
			}
		}
		input.close();

		// for the last publication
		writeF(booktitle, title, year, authors);

		// write only authors that published a paper in CONFERENCES
		for (Entry<String, Author> entry : allAuthors.entrySet()) {
			Author author = entry.getValue();

			if (authors_f.contains(author))
				w_authors.write(author.getID() + "\t" + entry.getKey() + "\n");
		}

		w_graph.close();
		w_authors.close();
		w_authors_conf.close();

		writeAuthorsPublicationsPerYear();
		writeAuthorsConferencesPerYear();

		System.out.println("DBLP graph is generated!");
	}

	Set<Author> authors_f = new HashSet<>();

	/**
	 * Write dblp graph and authors conferences to files
	 * 
	 * @param booktitle
	 * @param title
	 * @param year
	 * @param authors
	 * @throws IOException
	 */
	private void writeF(String booktitle, String title, int year, List<String> authors) throws IOException {
		// Used to generate graph from specific conferences
		if (title != null && (CONFERENCES.isEmpty() || CONFERENCES.contains(booktitle))) {

			// Write the authors
			for (int i = 0; i < authors.size(); i++) {
				Author authorA = allAuthors.get(authors.get(i));
				w_authors_conf.write(authorA.getID() + "\t" + booktitle + "\n");
				authors_f.add(authorA);

				for (int j = i + 1; j < authors.size(); j++) {
					Author authorB = allAuthors.get(authors.get(j));
					authors_f.add(authorB);

					// write graph edge
					w_graph.write(authorA.getID() + "\t" + authorB.getID() + "\t" + year + "\n");
				}

				// increase authorA publications count for this year
				authorA.increasePublicationSize(year);
				authorA.addConference(conferences.get(booktitle), year);
			}
		}
	}

	/**
	 * Write author \t attributeValue,attributeValue Each attibuteValue denotes
	 * the number of publications for that year
	 * 
	 * @throws IOException
	 */
	private void writeAuthorsPublicationsPerYear() throws IOException {
		FileWriter w_author_attr = new FileWriter(PATH_DBLP_GRAPH_ATTRIBUTES, false);

		w_author_attr.write("# Publications_count labels\n");

		// for each author
		for (Entry<String, Author> entry : allAuthors.entrySet()) {
			Author author = entry.getValue();

			if (!authors_f.contains(author))
				continue;

			int array[] = author.getStatus();

			w_author_attr.write(author.getID() + "|");

			for (int i = 0; i < array.length - 1; i++) {
				w_author_attr.write(array[i] + ",");
			}
			w_author_attr.write(array[array.length - 1] + "\n");
		}
		w_author_attr.close();
	}

	/**
	 * Write for each author the conferences and the years that he/she published
	 * a paper
	 * 
	 * @throws IOException
	 * 
	 */
	private void writeAuthorsConferencesPerYear() throws IOException {
		FileWriter w = new FileWriter(PATH_DBLP_CONFERENCES_MAP, false);

		for (Entry<String, Integer> entry : conferences.entrySet()) {
			w.write(entry.getKey() + "\t" + entry.getValue() + "\n");
		}
		w.close();

		w = new FileWriter(PATH_DBLP_GRAPH_CONF_ATTRIBUTES, false);
		w.write("# Conferences_count labels\n");

		// for each author
		for (Entry<String, Author> entry : allAuthors.entrySet()) {
			Author author = entry.getValue();
			Map<Integer, Set<Integer>> confPY = author.getConferencesPerYear();

			for (Entry<Integer, Set<Integer>> en : confPY.entrySet()) {
				w.write(author.getID() + "," + en.getKey() + "\t");

				List<Integer> times = new ArrayList<>(en.getValue());
				Collections.sort(times);

				for (int i = 0; i < times.size() - 1; i++)
					w.write(times.get(i) + ",");

				w.write(times.get(times.size() - 1) + "\n");
			}
			w.flush();
		}
		w.close();
	}

	public static void main(String[] args) throws IOException {
		new CreateDBLPGraph();
	}
}